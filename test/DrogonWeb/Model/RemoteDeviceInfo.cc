/**
 *
 *  RemoteDeviceInfo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "RemoteDeviceInfo.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::ccdb;

const std::string RemoteDeviceInfo::Cols::_id = "id";
const std::string RemoteDeviceInfo::Cols::_device_name = "device_name";
const std::string RemoteDeviceInfo::Cols::_device_ip = "device_ip";
const std::string RemoteDeviceInfo::Cols::_device_port = "device_port";
const std::string RemoteDeviceInfo::Cols::_last_check_time = "last_check_time";
const std::string RemoteDeviceInfo::Cols::_device_type = "device_type";
const std::string RemoteDeviceInfo::primaryKeyName = "id";
const bool RemoteDeviceInfo::hasPrimaryKey = true;
const std::string RemoteDeviceInfo::tableName = "remote_device_info";

const std::vector<typename RemoteDeviceInfo::MetaData> RemoteDeviceInfo::metaData_={
{"id","std::string","varchar(188)",188,0,1,1},
{"device_name","std::string","varchar(188)",188,0,0,1},
{"device_ip","std::string","varchar(188)",188,0,0,1},
{"device_port","int32_t","int(11)",4,0,0,1},
{"last_check_time","::trantor::Date","datetime(2)",0,0,0,1},
{"device_type","std::string","varchar(188)",188,0,0,0}
};
const std::string &RemoteDeviceInfo::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
RemoteDeviceInfo::RemoteDeviceInfo(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(r["device_name"].as<std::string>());
        }
        if(!r["device_ip"].isNull())
        {
            deviceIp_=std::make_shared<std::string>(r["device_ip"].as<std::string>());
        }
        if(!r["device_port"].isNull())
        {
            devicePort_=std::make_shared<int32_t>(r["device_port"].as<int32_t>());
        }
        if(!r["last_check_time"].isNull())
        {
            auto timeStr = r["last_check_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        if(!r["device_type"].isNull())
        {
            deviceType_=std::make_shared<std::string>(r["device_type"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            deviceName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            deviceIp_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            devicePort_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            deviceType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

RemoteDeviceInfo::RemoteDeviceInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            deviceIp_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            devicePort_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            deviceType_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

RemoteDeviceInfo::RemoteDeviceInfo(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("device_ip"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["device_ip"].isNull())
        {
            deviceIp_=std::make_shared<std::string>(pJson["device_ip"].asString());
        }
    }
    if(pJson.isMember("device_port"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["device_port"].isNull())
        {
            devicePort_=std::make_shared<int32_t>((int32_t)pJson["device_port"].asInt64());
        }
    }
    if(pJson.isMember("last_check_time"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["last_check_time"].isNull())
        {
            auto timeStr = pJson["last_check_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("device_type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["device_type"].isNull())
        {
            deviceType_=std::make_shared<std::string>(pJson["device_type"].asString());
        }
    }
}

void RemoteDeviceInfo::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            deviceIp_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            devicePort_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            deviceType_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}
                                                                    
void RemoteDeviceInfo::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("device_ip"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["device_ip"].isNull())
        {
            deviceIp_=std::make_shared<std::string>(pJson["device_ip"].asString());
        }
    }
    if(pJson.isMember("device_port"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["device_port"].isNull())
        {
            devicePort_=std::make_shared<int32_t>((int32_t)pJson["device_port"].asInt64());
        }
    }
    if(pJson.isMember("last_check_time"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["last_check_time"].isNull())
        {
            auto timeStr = pJson["last_check_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            size_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(*p=='.')
            {
                std::string decimals(p+1,&timeStr[timeStr.length()]);
                while(decimals.length()<6)
                {
                    decimals += "0";
                }
                decimalNum = (size_t)atol(decimals.c_str());
            }
            lastCheckTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
        }
    }
    if(pJson.isMember("device_type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["device_type"].isNull())
        {
            deviceType_=std::make_shared<std::string>(pJson["device_type"].asString());
        }
    }
}

const std::string &RemoteDeviceInfo::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RemoteDeviceInfo::getId() const noexcept
{
    return id_;
}
void RemoteDeviceInfo::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void RemoteDeviceInfo::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}


const typename RemoteDeviceInfo::PrimaryKeyType & RemoteDeviceInfo::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &RemoteDeviceInfo::getValueOfDeviceName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceName_)
        return *deviceName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RemoteDeviceInfo::getDeviceName() const noexcept
{
    return deviceName_;
}
void RemoteDeviceInfo::setDeviceName(const std::string &pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(pDeviceName);
    dirtyFlag_[1] = true;
}
void RemoteDeviceInfo::setDeviceName(std::string &&pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(std::move(pDeviceName));
    dirtyFlag_[1] = true;
}



const std::string &RemoteDeviceInfo::getValueOfDeviceIp() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceIp_)
        return *deviceIp_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RemoteDeviceInfo::getDeviceIp() const noexcept
{
    return deviceIp_;
}
void RemoteDeviceInfo::setDeviceIp(const std::string &pDeviceIp) noexcept
{
    deviceIp_ = std::make_shared<std::string>(pDeviceIp);
    dirtyFlag_[2] = true;
}
void RemoteDeviceInfo::setDeviceIp(std::string &&pDeviceIp) noexcept
{
    deviceIp_ = std::make_shared<std::string>(std::move(pDeviceIp));
    dirtyFlag_[2] = true;
}



const int32_t &RemoteDeviceInfo::getValueOfDevicePort() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(devicePort_)
        return *devicePort_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &RemoteDeviceInfo::getDevicePort() const noexcept
{
    return devicePort_;
}
void RemoteDeviceInfo::setDevicePort(const int32_t &pDevicePort) noexcept
{
    devicePort_ = std::make_shared<int32_t>(pDevicePort);
    dirtyFlag_[3] = true;
}



const ::trantor::Date &RemoteDeviceInfo::getValueOfLastCheckTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(lastCheckTime_)
        return *lastCheckTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &RemoteDeviceInfo::getLastCheckTime() const noexcept
{
    return lastCheckTime_;
}
void RemoteDeviceInfo::setLastCheckTime(const ::trantor::Date &pLastCheckTime) noexcept
{
    lastCheckTime_ = std::make_shared<::trantor::Date>(pLastCheckTime);
    dirtyFlag_[4] = true;
}



const std::string &RemoteDeviceInfo::getValueOfDeviceType() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceType_)
        return *deviceType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &RemoteDeviceInfo::getDeviceType() const noexcept
{
    return deviceType_;
}
void RemoteDeviceInfo::setDeviceType(const std::string &pDeviceType) noexcept
{
    deviceType_ = std::make_shared<std::string>(pDeviceType);
    dirtyFlag_[5] = true;
}
void RemoteDeviceInfo::setDeviceType(std::string &&pDeviceType) noexcept
{
    deviceType_ = std::make_shared<std::string>(std::move(pDeviceType));
    dirtyFlag_[5] = true;
}


void RemoteDeviceInfo::setDeviceTypeToNull() noexcept
{
    deviceType_.reset();
    dirtyFlag_[5] = true;
}

void RemoteDeviceInfo::updateId(const uint64_t id)
{
}

const std::vector<std::string> &RemoteDeviceInfo::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "device_name",
        "device_ip",
        "device_port",
        "last_check_time",
        "device_type"
    };
    return inCols;
}

void RemoteDeviceInfo::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDeviceIp())
        {
            binder << getValueOfDeviceIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDevicePort())
        {
            binder << getValueOfDevicePort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastCheckTime())
        {
            binder << getValueOfLastCheckTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDeviceType())
        {
            binder << getValueOfDeviceType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> RemoteDeviceInfo::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(dirtyFlag_);i++)
    {
        if(dirtyFlag_[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void RemoteDeviceInfo::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDeviceIp())
        {
            binder << getValueOfDeviceIp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getDevicePort())
        {
            binder << getValueOfDevicePort();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastCheckTime())
        {
            binder << getValueOfLastCheckTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDeviceType())
        {
            binder << getValueOfDeviceType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value RemoteDeviceInfo::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getDeviceIp())
    {
        ret["device_ip"]=getValueOfDeviceIp();
    }
    else
    {
        ret["device_ip"]=Json::Value();
    }
    if(getDevicePort())
    {
        ret["device_port"]=getValueOfDevicePort();
    }
    else
    {
        ret["device_port"]=Json::Value();
    }
    if(getLastCheckTime())
    {
        ret["last_check_time"]=getLastCheckTime()->toDbStringLocal();
    }
    else
    {
        ret["last_check_time"]=Json::Value();
    }
    if(getDeviceType())
    {
        ret["device_type"]=getValueOfDeviceType();
    }
    else
    {
        ret["device_type"]=Json::Value();
    }
    return ret;
}

Json::Value RemoteDeviceInfo::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDeviceName())
            {
                ret[pMasqueradingVector[1]]=getValueOfDeviceName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDeviceIp())
            {
                ret[pMasqueradingVector[2]]=getValueOfDeviceIp();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getDevicePort())
            {
                ret[pMasqueradingVector[3]]=getValueOfDevicePort();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLastCheckTime())
            {
                ret[pMasqueradingVector[4]]=getLastCheckTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDeviceType())
            {
                ret[pMasqueradingVector[5]]=getValueOfDeviceType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getDeviceIp())
    {
        ret["device_ip"]=getValueOfDeviceIp();
    }
    else
    {
        ret["device_ip"]=Json::Value();
    }
    if(getDevicePort())
    {
        ret["device_port"]=getValueOfDevicePort();
    }
    else
    {
        ret["device_port"]=Json::Value();
    }
    if(getLastCheckTime())
    {
        ret["last_check_time"]=getLastCheckTime()->toDbStringLocal();
    }
    else
    {
        ret["last_check_time"]=Json::Value();
    }
    if(getDeviceType())
    {
        ret["device_type"]=getValueOfDeviceType();
    }
    else
    {
        ret["device_type"]=Json::Value();
    }
    return ret;
}

bool RemoteDeviceInfo::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(1, "device_name", pJson["device_name"], err, true))
            return false;
    }
    else
    {
        err="The device_name column cannot be null";
        return false;
    }
    if(pJson.isMember("device_ip"))
    {
        if(!validJsonOfField(2, "device_ip", pJson["device_ip"], err, true))
            return false;
    }
    else
    {
        err="The device_ip column cannot be null";
        return false;
    }
    if(pJson.isMember("device_port"))
    {
        if(!validJsonOfField(3, "device_port", pJson["device_port"], err, true))
            return false;
    }
    else
    {
        err="The device_port column cannot be null";
        return false;
    }
    if(pJson.isMember("last_check_time"))
    {
        if(!validJsonOfField(4, "last_check_time", pJson["last_check_time"], err, true))
            return false;
    }
    else
    {
        err="The last_check_time column cannot be null";
        return false;
    }
    if(pJson.isMember("device_type"))
    {
        if(!validJsonOfField(5, "device_type", pJson["device_type"], err, true))
            return false;
    }
    return true;
}
bool RemoteDeviceInfo::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                          const std::vector<std::string> &pMasqueradingVector,
                                                          std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    return true;
}
bool RemoteDeviceInfo::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(1, "device_name", pJson["device_name"], err, false))
            return false;
    }
    if(pJson.isMember("device_ip"))
    {
        if(!validJsonOfField(2, "device_ip", pJson["device_ip"], err, false))
            return false;
    }
    if(pJson.isMember("device_port"))
    {
        if(!validJsonOfField(3, "device_port", pJson["device_port"], err, false))
            return false;
    }
    if(pJson.isMember("last_check_time"))
    {
        if(!validJsonOfField(4, "last_check_time", pJson["last_check_time"], err, false))
            return false;
    }
    if(pJson.isMember("device_type"))
    {
        if(!validJsonOfField(5, "device_type", pJson["device_type"], err, false))
            return false;
    }
    return true;
}
bool RemoteDeviceInfo::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    return true;
}
bool RemoteDeviceInfo::validJsonOfField(size_t index,
                                        const std::string &fieldName,
                                        const Json::Value &pJson, 
                                        std::string &err, 
                                        bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
