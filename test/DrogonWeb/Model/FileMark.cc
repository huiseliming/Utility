/**
 *
 *  FileMark.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "FileMark.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::ccdb;

const std::string FileMark::Cols::_file_name = "file_name";
const std::string FileMark::Cols::_file_path = "file_path";
const std::string FileMark::primaryKeyName = "file_name";
const bool FileMark::hasPrimaryKey = true;
const std::string FileMark::tableName = "file_mark";

const std::vector<typename FileMark::MetaData> FileMark::metaData_={
{"file_name","std::string","varchar(188)",188,0,1,1},
{"file_path","std::string","varchar(188)",188,0,0,0}
};
const std::string &FileMark::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
FileMark::FileMark(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(r["file_name"].as<std::string>());
        }
        if(!r["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(r["file_path"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            fileName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            filePath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

FileMark::FileMark(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

FileMark::FileMark(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("file_name"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("file_path"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson["file_path"].asString());
        }
    }
}

void FileMark::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}
                                                                    
void FileMark::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("file_name"))
    {
        if(!pJson["file_name"].isNull())
        {
            fileName_=std::make_shared<std::string>(pJson["file_name"].asString());
        }
    }
    if(pJson.isMember("file_path"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["file_path"].isNull())
        {
            filePath_=std::make_shared<std::string>(pJson["file_path"].asString());
        }
    }
}

const std::string &FileMark::getValueOfFileName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fileName_)
        return *fileName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FileMark::getFileName() const noexcept
{
    return fileName_;
}
void FileMark::setFileName(const std::string &pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(pFileName);
    dirtyFlag_[0] = true;
}
void FileMark::setFileName(std::string &&pFileName) noexcept
{
    fileName_ = std::make_shared<std::string>(std::move(pFileName));
    dirtyFlag_[0] = true;
}


const typename FileMark::PrimaryKeyType & FileMark::getPrimaryKey() const
{
    assert(fileName_);
    return *fileName_;
}

const std::string &FileMark::getValueOfFilePath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(filePath_)
        return *filePath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &FileMark::getFilePath() const noexcept
{
    return filePath_;
}
void FileMark::setFilePath(const std::string &pFilePath) noexcept
{
    filePath_ = std::make_shared<std::string>(pFilePath);
    dirtyFlag_[1] = true;
}
void FileMark::setFilePath(std::string &&pFilePath) noexcept
{
    filePath_ = std::make_shared<std::string>(std::move(pFilePath));
    dirtyFlag_[1] = true;
}


void FileMark::setFilePathToNull() noexcept
{
    filePath_.reset();
    dirtyFlag_[1] = true;
}

void FileMark::updateId(const uint64_t id)
{
}

const std::vector<std::string> &FileMark::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "file_name",
        "file_path"
    };
    return inCols;
}

void FileMark::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFilePath())
        {
            binder << getValueOfFilePath();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> FileMark::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(dirtyFlag_);i++)
    {
        if(dirtyFlag_[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void FileMark::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getFileName())
        {
            binder << getValueOfFileName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFilePath())
        {
            binder << getValueOfFilePath();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value FileMark::toJson() const
{
    Json::Value ret;
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getFilePath())
    {
        ret["file_path"]=getValueOfFilePath();
    }
    else
    {
        ret["file_path"]=Json::Value();
    }
    return ret;
}

Json::Value FileMark::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getFileName())
            {
                ret[pMasqueradingVector[0]]=getValueOfFileName();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFilePath())
            {
                ret[pMasqueradingVector[1]]=getValueOfFilePath();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getFileName())
    {
        ret["file_name"]=getValueOfFileName();
    }
    else
    {
        ret["file_name"]=Json::Value();
    }
    if(getFilePath())
    {
        ret["file_path"]=getValueOfFilePath();
    }
    else
    {
        ret["file_path"]=Json::Value();
    }
    return ret;
}

bool FileMark::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(0, "file_name", pJson["file_name"], err, true))
            return false;
    }
    else
    {
        err="The file_name column cannot be null";
        return false;
    }
    if(pJson.isMember("file_path"))
    {
        if(!validJsonOfField(1, "file_path", pJson["file_path"], err, true))
            return false;
    }
    return true;
}
bool FileMark::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    return true;
}
bool FileMark::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("file_name"))
    {
        if(!validJsonOfField(0, "file_name", pJson["file_name"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("file_path"))
    {
        if(!validJsonOfField(1, "file_path", pJson["file_path"], err, false))
            return false;
    }
    return true;
}
bool FileMark::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    return true;
}
bool FileMark::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson, 
                                std::string &err, 
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 188)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 188)";
                return false;               
            }

            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
